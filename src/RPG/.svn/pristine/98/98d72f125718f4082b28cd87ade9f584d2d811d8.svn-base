
package RPG;

import EntitySystem.Entity;
import EntitySystem.PhysicalComponent;
import EntitySystem.VisibleComponent;
import FactorySystem.GuardFactory;
import FactorySystem.ShortSwordFactory;
import FactorySystem.UserFactory;
import java.util.ArrayList;
import java.util.logging.Logger;
import org.newdawn.slick.GameContainer;
import org.newdawn.slick.Graphics;
import org.newdawn.slick.SlickException;
import org.newdawn.slick.state.StateBasedGame;
import org.newdawn.slick.tiled.TiledMap;

public class Level2 extends Level{

    public Level2(){
        
    }
    
    @Override
    public void init(GameContainer gc, StateBasedGame sbg) {
        this.stateID=2;
        try {
            this.map = new TiledMap("data/maps/level2.tmx");
        } catch (SlickException ex) {
            Logger.getLogger(Level1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        super.container = gc;
        super.game = (RPG)sbg;
        super.entities = new ArrayList();
        super.input = container.getInput();
        detectTerrain();        
        initCharacters();
    }

    public void initCharacters() {
        try {
            Entity user = new UserFactory(200,200).createEntity();
            Entity guard = new GuardFactory(300,300).createEntity();
            Entity shortsword = new ShortSwordFactory(300,360).createEntity();
            entities.add(user);
            entities.add(guard);
            entities.add(shortsword);
        } catch (SlickException ex) {
            Logger.getLogger(Level1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public void render(GameContainer gc, StateBasedGame sbg, Graphics grphcs) {
        this.map.render(0, 0);
        
        for(Entity entity : entities){
            checkLOS(entity, grphcs);
            if(entity.hasComponents(VisibleComponent.class) && entity.hasComponents(PhysicalComponent.class)){
                VisibleComponent viscomp = entity.getComponent(VisibleComponent.class);
                PhysicalComponent physcomp = entity.getComponent(PhysicalComponent.class);
                viscomp.getSprite().draw(physcomp.getXpos(), physcomp.getYpos());
            }
            if(entity.hasComponents(PhysicalComponent.class)){
                PhysicalComponent physcomp = entity.getComponent(PhysicalComponent.class);
                float x = physcomp.getBoundingbox().getX();
                float y = physcomp.getBoundingbox().getY();
                float w = physcomp.getBoundingbox().getWidth();
                float h = physcomp.getBoundingbox().getHeight();
                grphcs.drawRect(x, y, w, h);
            }                
        }
    }
    
}
